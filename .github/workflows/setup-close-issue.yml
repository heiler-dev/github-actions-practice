name: Setup Closed Issues

on:
  issues:
    types: [ closed ]

jobs:
  setup_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Set End date
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_V2_TOKEN }}
          script: |
            const { issue, repository } = context.payload;

            const projectNodeId = 'PVT_kwDODTY35s4A-Rii';
            const owner = repository.owner.login;
            const repo = repository.name;
            const issueNumber = issue.number;

            // 1. issue.number로부터 node_id 조회
            const issueNodeResp = await github.graphql(`
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    id
                  }
                }
              }
            `, {
              owner,
              repo,
              issueNumber
            });
            const issueNodeId = issueNodeResp.repository.issue.id;

            // 2. 프로젝트의 field 정보 가져오기
            const fieldData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        __typename
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId: projectNodeId });

            const fields = fieldData.node.fields.nodes;

            // 3. 해당 issue가 포함된 item 찾기
            const itemResp = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId: projectNodeId });

            const itemNode = itemResp.node.items.nodes.find(
              item => item.content?.id === issueNodeId
            );
            if (!itemNode) {
              console.log("이 이슈에 해당하는 Project 항목을 찾을 수 없습니다.");
              return;
            }

            const itemId = itemNode.id;

            // 4. End date 필드 찾기
            const endDateField = fields.find(f =>
              f.__typename === 'ProjectV2Field' &&
              f.name?.toLowerCase() === 'end date'
            );
            const endDateFieldId = endDateField?.id;

            // 5. 오늘 날짜를 ISO 형식으로 설정
            const today = new Date();
            const todayISOString = today.toISOString().split('T')[0];

            if (endDateFieldId) {
              await github.graphql(`
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: ${projectNodeId},
                    itemId: ${itemId},
                    fieldId: ${endDateFieldId},
                    value: { date: ${todayISOString} }
                  }) {
                    projectV2Item { id }
                  }
                }
              `);
            }
