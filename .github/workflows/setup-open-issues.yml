name: Setup Opened Issues

on:
  issues:
    types: [ opened, reopened ]

jobs:
  setup_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Set assignees
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, repository } = context.payload;
            const author = issue.user.login;

            await github.rest.issues.addAssignees({
              owner: repository.owner.login,
              repo: repository.name,
              issue_number: issue.number,
              assignees: [author],
            });

      - name: Set labels
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, repository } = context.payload;
            const title = issue.title;

            const titleLabelMap = {
              '[TEST]': 'test',
              '[FEATURE]': 'feature',
              '[FIX]': 'fix',
              '[STYLE]': 'style',
              '[DOCS]': 'docs',
              '[CHORE]': 'chore',
              '[REFACTOR]': 'refactor'
            };

            const feTeam = [];
            const beTeam = ['threepebbles'];

            const prefix = Object.keys(titleLabelMap).find(p => title.startsWith(p));
            const author = issue.user.login;
            const authorLabel = feTeam.includes(author) ? 'fe' : beTeam.includes(author) ? 'be' : null;

            const labels = [];
            if (prefix) labels.push(titleLabelMap[prefix]);
            if (authorLabel) labels.push(authorLabel);

            if (labels.length) {
              await github.rest.issues.addLabels({
                owner: repository.owner.login,
                repo: repository.name,
                issue_number: issue.number,
                labels,
              });
            }

      - name: Set Project v2
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_V2_TOKEN }}
          script: |
            // GitHub Project v2 ID (GraphQL 전용)
            const projectNodeId = 'PVT_kwDODTY35s4A-Rii';
            
            // Project의 Status 필드와 Todo 옵션의 고유 ID
            const statusFieldId = 'PVTSSF_lADODTY35s4A-RiizgxujjE';
            const todoOptionId = 'f75ad846';

            // Start Date 필드의 고유 ID
            const startDateFieldId = 'PVTF_lADODTY35s4A-Riizgxujmw'
            
            // GitHub Actions에서 전달 받은 Issue 정보
            const { issue } = context.payload;

            
            // 1. Issue를 Project 아이템으로 추가
            const addItemResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              contentId: issue.node_id,
            });

            // 2. Status 필드 Todo로 설정
            const itemId = addItemResponse.addProjectV2ItemById.item.id;
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              itemId,
              fieldId: statusFieldId,
              optionId: todoOptionId,
            });

            // 3. Start Date을 today로 설정
            const today = new Date();
            const todayISOString = today.toISOString().split('T')[0];
            await github.graphql(`
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${projectNodeId}",
                  itemId: "${itemId}",
                  fieldId: "${startDateFieldId}",
                  value: { date: "${todayISOString}" }
                }) {
                  projectV2Item { id }
                }
              }
            `);
            
            // 4. iteration 설정
            const iterationField = await github.graphql(`
              query {
                node(id: "${projectNodeId}") {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2IterationField {
                          id
                          configuration {
                            iterations {
                              id
                              startDate
                              duration
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `);

            const iterationFieldNode = iterationField.node.fields.nodes.find(f => f.configuration?.iterations);
            const iterationFieldId = iterationFieldNode.id;
            const iterations = iterationFieldNode.configuration.iterations;

            // 오늘이 포함된 iteration 찾기
            function isDateInRange(start, durationDays) {
              const startDate = new Date(start);
              const endDate = new Date(startDate);
              endDate.setDate(endDate.getDate() + durationDays);
              return today >= startDate && today < endDate;
            }

            const matchingIteration = iterations.find(i => isDateInRange(i.startDate, i.duration));

            if (matchingIteration) {
              // 4. Iteration 필드 설정
              await github.graphql(`
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectNodeId}",
                    itemId: "${itemId}",
                    fieldId: "${iterationFieldId}",
                    value: {
                      iterationId: "${matchingIteration.id}"
                    }
                  }) {
                    projectV2Item { id }
                  }
                }
              `);
            }